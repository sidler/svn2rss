<?php
/*
 *   This file is part of svn2rss.
 *
 *   svn2rss is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU Lesser General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   svn2rss is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public License
 *   along with svn2rss.  If not, see <http://www.gnu.org/licenses/>.
 *
 *
 *   (c) Stefan Idler, MulchProductions, sidler@mulchprod.de, http://www.mulchprod.de
 *
 */

/**
 * The global manager, handles the processing of a single request.
 *
 * @author Stefan Idler, sidler@mulchprod.de
 */
class Svn2Rss {

    private $strOutput = "";

    /**
     * Starts the processing of the current rss-request.
     * Acts like some kind of a main-method, so manages the further control-flow.
     */
    public function processSvn2RssRequest($strFeedParam = "") {

        try {
            //start by loading the config-file
            $objConfig = new ConfigReader($strFeedParam);

            //create the svn-reader and pass control
            $objSvnReader = new SvnReader($objConfig);
            $strSvnLog = $objSvnReader->getSvnLogContent();
            
            //create rss-nodes out of the logfile
            $objRssConverter = new Log2RssConverter($objConfig);
            $objRssRootNode = $objRssConverter->generateRssNodesFromLogContent($strSvnLog);

            $this->strOutput = $objRssRootNode->asXML();

        }
        catch (Svn2RssException $objException) {

            //Wrap error-message as a rss-feed element, too
            $objFeedRootNode = new SimpleXMLElement("<rss version=\"2.0\"></rss>");
            $objChannel = $objFeedRootNode->addChild("channel");
            $objChannel->addChild("title", "Error");
            $objChannel->addChild("description", "Error while loading feed");
            $objChannel->addChild("link", "n.a.");
            $objChannel->addChild("pubDate", strftime("%a, %d %b %Y %H:%M:%S GMT", time()));

            $objRssItemNode = $objChannel->addChild("item");
            $objRssItemNode->addChild("title","Something bad happened: \n".$objException->getMessage()."");
            $objRssItemNode->addChild("description","Something bad happened: \n".$objException->getMessage()."");
            $objRssItemNode->addChild("pubDate",strftime("%a, %d %b %Y %H:%M:%S GMT", time()));

            $this->strOutput = $objFeedRootNode->asXML();
        }
    }

    /**
     * Starts the processing of a web-request, so loading a single revision-entry
     * and rendering it as an (x)html page / response.
     * main-like behaviour.
     */
    public function processSvn2WebRequest($strFeedParam = "", $strRevisionParam = "") {
        try {
            //start by loading the config-file
            $objConfig = new ConfigReader($strFeedParam);

            //create the svn-reader and pass control
            $objSvnReader = new SvnReader($objConfig);
            $strSvnLog = $objSvnReader->getSvnLogContent($strRevisionParam);

            //pass the entry to the html-processor
            $objRssConverter = new Log2HtmlConverter($objConfig);
            $this->strOutput = $objRssConverter->generateHtmlFromLogContent($strSvnLog, $strRevisionParam);

        }
        catch (Svn2RssException $objException) {
            $this->strOutput = "<html><head><title>Error</title><body><h1>An error occured</h1><p>".$objException->getMessage()."</p></body></html>";
        }

    }


    /**
     * Get the content generated by Svn2Rss
     *
     * @return string
     */
    public function getStrOutput() {
        return $this->strOutput;
    }

}

